name: PR Checks

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - '.github/workflows/pr.yml'

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
      
      - name: Set up Python
        run: uv python install 3.10
      
      - name: Install dependencies
        run: uv sync --all-extras --dev
      
      - name: Run ruff format check
        run: uv run ruff format --check src/ tests/
      
      - name: Run ruff linter
        run: uv run ruff check src/ tests/
      
      - name: Run type checking
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            pwsh -File scripts/typecheck.ps1
          else
            bash scripts/typecheck.sh
          fi
        shell: bash

  test-build:
    name: Test Build (Windows x64)
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
      
      - name: Set up Python
        run: uv python install 3.10
      
      - name: Install dependencies
        run: uv sync --all-extras --dev
      
      - name: Verify imports
        run: uv run python -c "from fluid_server import app; print('Import successful')"
      
      - name: Run server health check (Windows x64)
        run: |
          Start-Process -FilePath "uv" -ArgumentList "run", "python", "-m", "fluid_server" -PassThru -WindowStyle Hidden | Out-Null
          Start-Sleep -Seconds 5
          Invoke-WebRequest -Uri http://localhost:8080/health -UseBasicParsing
          Get-Process python | Stop-Process -Force
        shell: pwsh

  build-executable:
    name: Build Executable (Windows x64)
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
      
      - name: Set up Python
        run: uv python install 3.10
      
      - name: Install dependencies
        run: uv sync --all-extras --dev
      
      - name: Build executable with PyInstaller (Windows x64)
        shell: pwsh
        run: |
          # Use the build.ps1 script which detects and builds for current architecture
          # GitHub Actions runners are x64, so this will build for x64
          .\scripts\build.ps1
      
      - name: Test executable (Windows x64)
        shell: pwsh
        run: |
          .\dist\fluid-server.exe --help
          Start-Process -FilePath ".\dist\fluid-server.exe" -PassThru -WindowStyle Hidden | Out-Null
          Start-Sleep -Seconds 5
          Invoke-WebRequest -Uri http://localhost:8080/health -UseBasicParsing
          Get-Process fluid-server | Stop-Process -Force
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: fluid-server-windows-x64
          path: dist/
          retention-days: 7